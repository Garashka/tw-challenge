{"version":3,"sources":["images/logo.svg","store/users/userSlice.js","components/user-directory/DirectoryTable.js","components/app/App.js","store/store.js","serviceWorker.js","index.js"],"names":["module","exports","userSlice","createSlice","name","initialState","userApi","users","reducers","setUsers","state","action","payload","data","actions","HeaderCells","id","numeric","label","DirectoryTable","props","tableData","rowsPerPage","page","order","orderBy","dataFetched","this","fetch","then","response","json","setState","a","b","descendingComparator","array","comparator","stabilizedThis","map","el","index","sort","classes","className","root","Paper","paper","TableContainer","table","Table","stickyHeader","TableHeaders","onRequestSort","event","property","isAsc","TableBody","stableSort","getComparator","slice","row","Row","key","TableFooter","TableRow","TablePagination","rowsPerPageOptions","colSpan","count","length","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value","CircularProgress","progress","DownloadButton","csvLink","TableHead","TableCell","header","sortDirection","TableSortLabel","active","direction","onClick","hiddenSortIcon","React","useState","open","setOpen","Fragment","IconButton","aria-label","size","first_name","last_name","email","style","paddingBottom","paddingTop","Collapse","in","timeout","Box","margin","src","avatar","alt","createRef","Button","variant","current","link","click","button","filename","ref","Component","mapDispatchToProps","compose","connect","directory","withStyles","theme","width","spacing","overflow","maxHeight","border","clip","height","padding","position","top","alignItems","justifyContent","verticalAlign","App","logo","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4e31f3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'directory',\r\n  initialState: {\r\n    userApi: \"https://reqres.in/api/users\",\r\n    users: [],\r\n  },\r\n  reducers: {\r\n    setUsers: (state, action) => {\r\n      state.users = action.payload.data\r\n    },\r\n  }\r\n});\r\n\r\nexport const { setUsers } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;","import { CircularProgress, Paper, TableSortLabel } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setUsers } from '../../store/users/userSlice';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport { compose } from '@reduxjs/toolkit';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { CSVLink } from 'react-csv';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > *': {\r\n      margin: theme.spacing(2),\r\n    },\r\n  },\r\n  paper: {\r\n    overflow: \"auto\"\r\n  },\r\n  table: {\r\n    maxHeight: 800,\r\n  },\r\n  hiddenSortIcon: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  progress: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    verticalAlign: 'middle',\r\n    width: '100%'\r\n  },\r\n  button: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    verticalAlign: 'middle',\r\n  }\r\n});\r\n\r\nconst HeaderCells = [\r\n  { id: 'id', numeric: true, label: 'ID' },\r\n  { id: 'first_name', numeric: false, label: 'First Name' },\r\n  { id: 'last_name', numeric: false, label: 'Surname' },\r\n  { id: 'email', numeric: false, label: 'Email' },\r\n];\r\n\r\nclass DirectoryTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Local state storage for state specific to table\r\n    this.state = {\r\n      tableData: [],\r\n      rowsPerPage: 5,\r\n      page: 0,\r\n      order: 'asc',\r\n      orderBy: 'id',\r\n      userApi: \"\",\r\n      dataFetched: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { setUsers, userApi } = this.props;\r\n    const { dataFetched } = this.props;\r\n\r\n    // In production, a more robust aynsc method should probably used. This will do for now.\r\n    // API address is stored in redux. In production we would have some central store of API addresses rather than in the individual components.\r\n    fetch(userApi)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Store the requested data in Redux\r\n        setUsers(data);\r\n        this.setState({ dataFetched: true })\r\n      })\r\n  }\r\n\r\n  // Sorting functionality, largely taken from Material-UI example\r\n  descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n  getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => this.descendingComparator(a, b, orderBy)\r\n      : (a, b) => -this.descendingComparator(a, b, orderBy);\r\n  }\r\n  stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n  }\r\n\r\n  render() {\r\n    const { classes, tableData } = this.props;\r\n    const { page, rowsPerPage, order, orderBy, dataFetched } = this.state;\r\n\r\n    // Pagination functions\r\n    const handleChangePage = (event, newPage) => {\r\n      this.setState({ page: newPage });\r\n    }\r\n    const handleChangeRowsPerPage = (event) => {\r\n      this.setState({ rowsPerPage: parseInt(event.target.value, 10) });\r\n      this.setState({ page: 0 });\r\n    }\r\n\r\n    // Sort functions\r\n    const handleRequestSort = (event, property) => {\r\n      const isAsc = orderBy === property && order === 'asc';\r\n      this.setState({ order: isAsc ? 'desc' : 'asc' });\r\n      this.setState({ orderBy: property })\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        {dataFetched ?\r\n          <Paper className={classes.paper}>\r\n            <TableContainer className={classes.table}>\r\n              <Table stickyHeader>\r\n                <this.TableHeaders\r\n                  classes={classes}\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  onRequestSort={handleRequestSort}\r\n                />\r\n                <TableBody>\r\n                  {\r\n                    this.stableSort(tableData, this.getComparator(order, orderBy))\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((row, index) => (\r\n                        <this.Row key={row.id} row={row} />\r\n                      ))\r\n                  }\r\n                </TableBody>\r\n                <TableFooter>\r\n                  <TableRow>\r\n                    <TablePagination\r\n                      rowsPerPageOptions={[5, 10, 25, 50]}\r\n                      colSpan={3}\r\n                      count={tableData.length}\r\n                      rowsPerPage={rowsPerPage}\r\n                      page={page}\r\n                      onChangePage={handleChangePage}\r\n                      onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                  </TableRow>\r\n                </TableFooter>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper >\r\n          : <div><CircularProgress className={classes.progress}></CircularProgress></div>}\r\n        <div><this.DownloadButton\r\n          classes={classes}\r\n          tableData={tableData}\r\n          csvLink={this.csvLink}\r\n        /></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Return table header row with sort features added\r\n  TableHeaders(props) {\r\n    const { classes, order, orderBy, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n      onRequestSort(event, property);\r\n    }\r\n\r\n    return (\r\n      <TableHead>\r\n        <TableRow>\r\n          {/* Empty column for expanadable avatar buttons */}\r\n          <TableCell></TableCell>\r\n          {HeaderCells.map((header) => (\r\n            <TableCell\r\n              key={header.id}\r\n              sortDirection={orderBy === header.id ? order : false}\r\n            >\r\n              <TableSortLabel\r\n                active={orderBy === header.id}\r\n                direction={orderBy === header.id ? order : 'asc'}\r\n                onClick={createSortHandler(header.id)}\r\n              >\r\n                {header.label}\r\n                {/* If we are currently sorting by this column, display the sort order icon (ascend or descent as appropriate) */}\r\n                {orderBy === header.id ? (\r\n                  <span className={classes.hiddenSortIcon}>\r\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                  </span>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            </TableCell>\r\n          ))}\r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n\r\n  // Return row for rendering as a function object, to separate out state for show/hide avatars\r\n  Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    return (\r\n      <React.Fragment>\r\n        <TableRow key={row.id}>\r\n          {/* Extra cell for avatar visibility toggle */}\r\n          <TableCell>\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell>{row.id}</TableCell>\r\n          <TableCell>{row.first_name}</TableCell>\r\n          <TableCell>{row.last_name}</TableCell>\r\n          <TableCell>{row.email}</TableCell>\r\n        </TableRow>\r\n        {/* Extra row for collapsible user avatar */}\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n            <Collapse in={open} timeout=\"auto\">\r\n              <Box margin={1}>\r\n                <img src={row.avatar} alt=\"User Avatar\" />\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  // Returns a download button that exports csv\r\n  DownloadButton(props) {\r\n    const { tableData, classes } = props;\r\n\r\n    // Ref used to link material-UI button to CSV-Link library button\r\n    const csvLink = React.createRef();\r\n\r\n    return ([\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={() => csvLink.current.link.click()}\r\n        key=\"0\"\r\n        className={classes.button}\r\n      >\r\n        Export to CSV\r\n    </Button >,\r\n      <CSVLink\r\n        data={tableData}\r\n        filename={'directory.csv'}\r\n        className=\"hidden\"\r\n        ref={csvLink}\r\n        key=\"1\"\r\n      />\r\n    ])\r\n  }\r\n}\r\n\r\n\r\n// Redux bindings\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tableData: state.directory.users,\r\n    userApi: state.directory.userApi\r\n  };\r\n}\r\nconst mapDispatchToProps = {\r\n  setUsers,\r\n}\r\n\r\n// Compose combines multiple higher order components\r\nexport default compose(\r\n  connect(mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  withStyles(styles),\r\n)(DirectoryTable);","import React from 'react';\r\nimport logo from '../../images/logo.svg';\r\nimport DirectoryTable from '../user-directory/DirectoryTable';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </header>\r\n        <div className=\"user-info-table\">\r\n          <DirectoryTable />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userSlice from './users/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    directory: userSlice,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app/App';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Strict mode must be disabled to remove an error with pagination in Material-UI\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}